module boolean #(
    SIZE = 32 : SIZE > 0
)(
    input a[SIZE],
    input b[SIZE],
    input alufn[6],
    output bool[SIZE]
) {
    
    always {
        // For each bit position, apply the appropriate boolean function
        repeat(i, SIZE){
            // Use the full 6-bit ALUFN code to select functions
            case(alufn[5:0]) {
                6h18: bool[i] = a[i] & b[i];      // AND
                6h1E: bool[i] = a[i] | b[i];      // OR
                6h16: bool[i] = a[i] ^ b[i];      // XOR
                6h1A: bool[i] = a[i];             // A (passthrough)
                default: bool[i] = 0;
            }
        }
    }
}
