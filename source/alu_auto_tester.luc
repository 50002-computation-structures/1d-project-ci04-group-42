module alu_auto_tester (
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output io_segment[8],
    output led[8],
    output io_select[4]
) {
    
    alu alu
    
    enum States {
        RUN,
        STOP,
        IDLE,
        NEXT,
        PREV
    }
    
    const SIZE = 29
    //const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 6 for sim, 16 on hardware
    const SLOW_CLOCK_DEFAULT_SPEED = $is_sim() ? 8 : 28 // put 8  for sim, 28 for hardware
    const CLK_FREQ = $is_sim() ? 1000 : 10000000
    
    sig slow_clock
    
    const INSTRUCTION = {
        c{6b11,-31d10,32d2},c{6b11,32d15,32d3},c{6b11,32d10,32d1},c{6b11,32d0,32d5},  // division
        c{6b11,32d2147483647,32d1},c{6b11,32d10,32hFFFFFFFE},c{6b11,-31d7,-31d3},  // division
        c{6h18, 32d45, 32d0}, c{6h18, 32d45, 32hFFFFFFFF}, c{6h18, 32d50, 32d50}, c{6h18, 32d50, ~32d50}, //and
        c{6h1E, 32d45, 32d0}, c{6h1E, 32d45, 32hFFFFFFFF}, c{6h1E, 32d45, 32d45}, //or
        c{6h16, 32d5, 32d0}, c{6h16, 32d5, 32d5},c{6h16, 32d5, ~32d5}, //xor
        c{6h1A, 32d5, 32d0}, //a
        c{6b110011, 32d45, 32d45},c{6b110011, 32d45, 32d50}, //cmpeq
        c{6b110101, 32d40, 32d45}, c{6b110101, 32d45, 32d45},c{6b110101, 32d45, 32d40}, //cmplt
        c{6b110101, 32d40, 32d45},c{6b110111, 32d45, 32d45}, c{6b110111, 32d45, 32d30}, //cmple
        c{6b10,32d25, 32d10},c{6b10,32d1, 32d6},c{6b10,32d0, 32d5}, //multiply
        c{6b01, 32d0, 32d2147483647},c{6b01, 32d10, 32d20},c{6b01, 32d0, 32d20},c{6b01, 32d20, 32d0}, //sub
        c{6b0,32d2147483647, 32d2147483647},c{6b0,32d15, 32d20},c{6b0,32d0,32d20},c{6b0,32d20, 32d0}, //add
        c{6h20, 32h80000001, 32d1}, c{6h20, 32d5, 32d0}, c{6h20, 32d1, 32d31},c{6h20, 32d8, 32d1},  // SHL
        c{6h21, 32d45, 32d0}, c{6h21, 32hFFFFFFFF, 32d31},c{6h21, 32d16, 32d2}, // SHR 
        c{6b100011, 32hFFFFFFFF, 32d1}  // SAR (-1 >> 1 = -1)
        
    } 
        
    const CORRECT_ANS = {
        c{-31d5,0,0,0},c{32d5,0,0,0},c{32d10,0,0,0},c{32d0,1,0,0},   // division
        c{32d2147483647,0,0,0},c{32hFFFFFFFB,0,0,1},c{32d2,0,0,0},   // division
        c{32d0, 0, 0, 0}, c{32d45, 0, 0, 0}, c{32d50, 0, 0, 0}, c{32d0, 0, 0, 0}, //and
        c{32d45, 0, 0, 0}, c{32hFFFFFFFF, 0, 0, 0}, c{32d45, 0, 0, 0}, //or
        c{32d5, 0, 0, 0}, c{32d0, 0, 0, 0}, c{32hFFFFFFFF, 0, 0, 0}, //xor
        c{32d5, 0, 0, 0}, //a
        c{32d1, 0, 0, 0}, c{32d0, 0, 0, 0}, //cmpeq
        c{32d1, 0, 0, 0}, c{32d0, 0, 0, 0},c{32d0, 0, 0, 0}, //cmplt
        c{32d1, 0, 0, 0},c{32d1, 0, 0, 0}, c{32d0, 0, 0, 0}, //cmple
        c{32d250,0,0,0},c{32d6,0,0,0},c{32d0,0,0,0}, //multiply
        c{-31d2147483647,0,0,1},c{-31d10,0,0,1},c{-31d20,0,0,1},c{32d20,0,0,0}, //sub
        c{32d4294967296,0,1,0},c{32d35,0,0,0},c{32d20,0,0,0},c{32d20,0,0,0}, //add 
        c{32d2, 0, 0, 0},c{32d5, 0, 0, 0}, c{32h80000000, 0, 0, 0}, c{32d16, 0, 0, 0},  // SHL
        c{32d45, 0, 0, 0}, c{32d1, 0, 0, 0}, c{32d4, 0, 0, 0},   // SHR
        c{32hFFFFFFFF, 0, 0, 0}   // SAR: -1 >> 1 = -1        
    } 
    
    sig cur_ins[70]
    sig cur_out[32]
    sig cur_v
    
    sig cor_ans[35]
    sig cor_out[32]
    sig cor_z
    sig cor_v
    sig cor_n
    
    
    .clk(clk) {
        
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}})) //edge detector component in alchitry lab
        edge_detector slow_clock_edge(#RISE(1), #FALL(0))
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ}})) 
        .rst(rst) {
            
            
            dff counter[SIZE]
            dff states[$width(States)](#INIT(States.IDLE)) //reset everything back to idle
            dff slow_clock_enable(#INIT(0))
            dff pc[6](#INIT(0))
            dff is_correct (#INIT(1))
        }
    }
    
 always {
        // implement alu tester logic here
        alu.a = 0
        alu.b = 0
        alu.alufn = 0
        io_led = 3x{{8h0}}
        io_segment = 0
        io_select = 4hF
        
        
        // condition the buttons, then take rising edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        led = 0
        
        
        // connect dffs 
        counter.d = counter.q + 1 // always increment
        states.d = states.q
        slow_clock_enable.d = slow_clock_enable.q
        pc.d=pc.q
        is_correct.d=is_correct.q
        
        // signal connection
        slow_clock = counter.q[SLOW_CLOCK_DEFAULT_SPEED] // pointed based on the bit of the counter 
        
        case (slow_clock_enable.q){
            0:
                slow_clock_edge.in = 0 // always don't increment or decrement
            1: 
                slow_clock_edge.in =  slow_clock 
            default:
                slow_clock_edge.in = 0
        }
        
        case (states.q){
            States.IDLE:
            
                // this takes precedence
                // if slow clock rising edge, go to UPDATE state
            if (slow_clock_edge.out){
            states.d=States.NEXT
                }

                //if button[1] is pressed
            else if (io_button_edge.out[1]){
                if (~|slow_clock_enable.q){
                    states.d=States.RUN
                    }
                
                else {
                    states.d=States.STOP
                }
            }
            else if (io_button_edge.out[4]){
                if (~|slow_clock_enable.q){
                        states.d=States.NEXT
                    }
                }
            else if (io_button_edge.out[3]){
                if (~|slow_clock_enable.q){
                        states.d=States.PREV
                    }
                }
            
            else if (~is_correct.q){
                if (slow_clock_enable.q){
                    states.d=States.STOP
                }
               
            }
            
            else if (~io_dip[2][7]){
                states.d=States.STOP
                }
            
            States.NEXT:
                // move on to next test case
            if (pc.q<d44){
                    pc.d=pc.q+1
                }
            else{
                pc.d=0
                }
 
                //back to idle
                
            states.d=States.IDLE

            States.PREV:
                //move to previous test case
            if (pc.q>d0){
                    pc.d=pc.q-1
                }
            else{
                pc.d=d44
                }
            states.d=States.IDLE
            
            States.RUN:
                // handle slow clock, next cycle set to 1
            slow_clock_enable.d=1
                // return to IDLE
            states.d=States.IDLE
            
            States.STOP:
                // handle slow clock, next cycle set to 0
            slow_clock_enable.d=0
                // return to IDLE
            states.d=States.IDLE
           
            
        }
        
        //READING INSTRUCTION
        cur_ins=INSTRUCTION[pc.q]
        alu.alufn = cur_ins[69:64]
        alu.a=cur_ins[63:32]
        alu.b=cur_ins[31:0]
        
        //simulation of 'wrong' answer
        if(io_dip[0][0]){
            cur_out=~alu.out //check if first dip button is being pressed down. if yes, invert the output and v
            cur_v = ~alu.v
        }
        else{
            cur_out=alu.out
            cur_v = alu.v
        }
        
        //FETCHING CORRECT OUTPUTS
        cor_ans = CORRECT_ANS[pc.q]
        cor_out= cor_ans[34:3]
        cor_z=cor_ans[2]
        cor_v=cor_ans[1]
        cor_n=cor_ans[0]
        
        
        //CHECKING IF OUTPUT IS CORRECT
        if ((cor_out==cur_out) | (cor_v & cur_v)){ // either result is correct, or overflow
            if ((cur_ins[69:64] == b000000)| (cur_ins[69:64] == b000001)){ //additional check for add and sub
                if ((cor_z==alu.z & cor_n==alu.n) //either z and n values correct,
                    | (cor_v == cur_v)){ //or overflow happens and alu correctly detects it
                    is_correct.d=1
                    led[1]=1
                }
                else{ 
                    is_correct.d=0
                    led[2]=1
                }
            }
            else{ //for other operations, no need additional check
                is_correct.d=1
                led[1]=1
            }
        }
        else{ //wrong (incorrect value AND overflow not supposed to happen)
            is_correct.d=0
            led[2]=1
        }
        
        //AIDING DISPLAYS
        
        led[0]= slow_clock//blink according to slow clock
        io_led[1]=c{b00,cur_ins[69:64]} //display current ALUFN
        io_led[0]=pc.q //display current instruction index
        
        
        
        
    }
}
        