module x_bit_right_shifter #(
SIZE = 32 : SIZE>0,
SHIFT = 8 : SHIFT > -1 & SHIFT < SIZE)
(
    input a[SIZE],  
    input do_shift,  // signal to perform the shift or not
    input pad, 
    output out[SIZE]
    
    
) {
    mux2 shift_unit[SIZE] // 32 mux_2 modules which stores whether each bit is shifted (1) or not (0)
    sig shifted_pattern[SIZE] // store the shifted binary number
    always {
        shift_unit.s0 = SIZEx{do_shift} // getting values of s0 (if we shift 1 bit we need shift all the 
        // other bits so we change the whole array of shift)_unit)
        shifted_pattern = c{SHIFTx{pad} ,a[SIZE-1:SHIFT]} // concatenating the shifted + padding
        repeat (i,SIZE){
            shift_unit.in[i]= c{shifted_pattern[i],a[i]}
        
        }
        
        out = shift_unit.out
    }
}
