module randomizer_unit 
#(
    RANDOM_CLOCK_DIV ~ 10
)(
    input clk,   // clock
    input rst,   // reset
    output random_light_sequence[24] //c7c7o7  c6c6o6 ....... c0c0o0
) {
    const GENERATE_NUMBER_CLOCK_SPEED = RANDOM_CLOCK_DIV + 1 //next number clock
    
    //functional helper units
    cmpeq3inp comparator
    light_decoder_full light_decoder
    
    .clk(clk) {
        .rst(rst) {
            //initialize all dffs except seed
            dff cur_light[24](#INIT(0))
            
            //counters
            counter seed_clock(#SIZE(1),#DIV(RANDOM_CLOCK_DIV)) //technically just a slow clock
            counter generate_next_number_clock(#SIZE(1), #DIV(GENERATE_NUMBER_CLOCK_SPEED)) //a slow clock thats
            //slower than the seed clock 
            
            //random generator module
            pn_gen random_number
            

        }

        edge_detector edge_detector_next(.in(generate_next_number_clock.value))
        edge_detector edge_detector_seed(.in(seed_clock.value))
        dff seed[16] // not globally reset
 
    }

    sig encoded_light[18]
   
    
    always { 

        cur_light.d=cur_light.q

        random_number.seed = seed.q
        random_number.next = edge_detector_next.out
        
        
        //default connections
        
        encoded_light=18b0
        comparator.in1=b000
        comparator.in2=b000
        comparator.in3=b000
        light_decoder.encoded=18b0
        
        
        if ((edge_detector_next.out)){
            encoded_light=random_number.num[17:0]
            comparator.in1=encoded_light[4:2]
            comparator.in2=encoded_light[10:8]
            comparator.in3=encoded_light[16:14]
            if (comparator.out){
                light_decoder.encoded = encoded_light
                cur_light.d=light_decoder.out
            }
            
        }

        if(edge_detector_seed.out){
            seed.d = seed.q + 1
        }
        
        random_light_sequence=cur_light.q
        
        
    }
}