module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    const CLK_FREQ = $is_sim() ? 1000 : 10000000
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 3 for sim, 16 for hardware
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond

        //button conditioners and edge detectors
        edge_detector button_edge_detector[5] (#RISE(5x{{1}}),#FALL(5x{{0}}))
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ}})) 
        
        .rst(rst){

            game_datapath game_datapath

            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
            
        }
    }

    bin_to_dec bin_to_dec_converter_sevseg2(#DIGITS(2))
    bin_to_dec bin_to_dec_converter_score(#DIGITS(2))
   
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
 
        usb_tx = usb_rx          // loop serial port
        
        //default outputs
        led = 8b0
        io_led = 3x{{8b0}}
        io_segment = 7b1111111
        io_select = 4hF
        
        //button conditioners and edge detectors
        io_button_cond.in = io_button
        button_edge_detector.in= io_button_cond.out

        //inputs to game datapath
        game_datapath.start_button_pressed = button_edge_detector.out[1]
        game_datapath.button_0_pressed = ~io_dip[0][0] & button_edge_detector.out[0]
        game_datapath.button_1_pressed = ~io_dip[0][0] & button_edge_detector.out[4]
        game_datapath.button_2_pressed = ~io_dip[0][0] & button_edge_detector.out[2]
        game_datapath.button_3_pressed = ~io_dip[0][0] & button_edge_detector.out[3]
        game_datapath.button_4_pressed = io_dip[0][0] & button_edge_detector.out[0]
        game_datapath.button_5_pressed = io_dip[0][0] & button_edge_detector.out[4]
        game_datapath.button_6_pressed = io_dip[0][0] & button_edge_detector.out[2]
        game_datapath.button_7_pressed = io_dip[0][0] & button_edge_detector.out[3]
        
        
        io_led[0]=game_datapath.game_leds[7:0]
        io_led[1]=game_datapath.game_leds[15:8]
        io_led[2]=game_datapath.game_leds[23:16]
        
        if(game_datapath.indicator_led[1]){
            led[game_datapath.indicator_led[0]]=1
        }
        
        led[4:2] = game_datapath.bomb_color_led
        
        
        
        //seven segments
        //update 7segments
        seg.values = 4x{{4b0}} // default to all 0 first
        bin_to_dec_converter_sevseg2.value = game_datapath.sevseg2_binary[6:0] //max score 99 that can be displayed
        bin_to_dec_converter_score.value = game_datapath.score_led[6:0]
        seg.values = c{bin_to_dec_converter_sevseg2.digits,bin_to_dec_converter_score.digits}
       
        
        io_segment = ~seg.seg
        io_select = ~seg.sel
        
        

 
    }
}