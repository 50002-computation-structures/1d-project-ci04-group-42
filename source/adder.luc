module adder #(
    SIZE ~ 32 : SIZE > 1
)(
    input a[SIZE],
    input b[SIZE],
    input alufn[6],
    output out[SIZE],
    output z,
    output v,
    output n
) {
    rca rca (#SIZE(SIZE))
    sig xb[SIZE]
    
    always {
        xb = b ^ SIZEx{alufn[0]} //why take the least significant bit ???
        rca.a = a
        rca.b = xb
        rca.cin = alufn[0] // 1: cin = 1 for subtraction
        // implement adder/subtractor unit logic here
        
        out = rca.s
        z = ~|rca.s
        v = (~a[SIZE-1] & ~xb[SIZE-1] & rca.s[SIZE-1]) | (a[SIZE-1] & xb[SIZE-1] & ~rca.s[SIZE-1]) 
        n = rca.s[SIZE-1]
        
    }
}