module right_shifter #(
SIZE = 32 : SIZE>0)(
    input a[SIZE],  // binary number
    input b[5],  // 5 is the size of bits of b that represent the amount of bits shifting (in decimal)
    input pad,
    output shr[SIZE] // shifted output
) {
    
    x_bit_right_shifter right_shift16(#SHIFT(16)) // parameter
    x_bit_right_shifter right_shift8(#SHIFT(8))
    x_bit_right_shifter right_shift4(#SHIFT(4))
    x_bit_right_shifter right_shift2(#SHIFT(2))
    x_bit_right_shifter right_shift1(#SHIFT(1))
    
    always {
        right_shift16.pad = pad
        right_shift8.pad = pad
        right_shift4.pad = pad
        right_shift2.pad = pad
        right_shift1.pad = pad
        
        
        // do_shift = b[i] = 1/0; shift or not shift
        // b[4:0] 10101
        // b[0] = 1 * 2^0
        // b[1] = 0 * 2^1
        right_shift16.do_shift = b[4] 
        right_shift8.do_shift = b[3]
        right_shift4.do_shift = b[2]
        right_shift2.do_shift = b[1]
        right_shift1.do_shift = b[0]
        
        right_shift16.a = a
        // getting ouput of x_bit_right_shifter
        right_shift8.a = right_shift16.out
        right_shift4.a = right_shift8.out
        right_shift2.a = right_shift4.out
        right_shift1.a = right_shift2.out
        shr = right_shift1.out
    }
}
